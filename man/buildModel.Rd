% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildModel.R
\name{buildModel}
\alias{buildModel}
\title{Train a neural network model}
\usage{
buildModel(
  X,
  Y,
  family=NULL,
  learning_rate=0.05,
  num_epochs,
  hidden_layer_dims=NULL,
  hidden_layer_activations=NULL,
  optimiser="GradientDescent",
  keep_prob=NULL,
  input_keep_prob=NULL
  alpha=0,
  lambda=0,
  mini_batch_size=NULL,
  folds=NULL,
  beta1=ifelse(optimiser %in% c("Momentum", "Adam"), 0.9, NULL),
  beta2=ifelse(optimiser %in% c("RMSProp", "Adam"), 0.999, NULL),
  epsilon=ifelse(optimiser %in% c("RMSProp", "Adam"), 1E-8, NULL),
  print_every=100L,
  seed=1984L,
  plot=TRUE,
  checkpoint=NULL,
  keep=FALSE
)
}
\arguments{
\item{X}{A matrix with rows as input features and columns as training examples}

\item{Y}{A matrix with rows as target values and columns as training examples.}

\item{family}{Type of regression to be performed. One of "binary", "multiclass", "gaussian", "poisson", "gamma", "tweedie". Will be ignored if starting from a checkpoint model. Alternatively you can specify a named list with the following elements: "family" - a character of length 1 for reference only; "link.inv" - a function (the inverse link function for activating the output layer); "costfun" - a function with parameters 'Y'and 'Yhat' representing the cost function to be minimised; "gradfun" - a function with parameters 'Y'and 'Yhat' representing the gradient of the cost function with respect to the linear, pre-activation, matrix in the output layer.}

\item{learning_rate}{Learning rate to use.}

\item{num_epochs}{Number of epochs (complete pass through training data) to be performed. If using mini-batches the number of iterations may be much higher.}

\item{hidden_layer_dims}{Integer vector representing the dimensions of the hidden layers. Should not be specified if starting from a checkpoint model.}

\item{hidden_layer_activations}{Character vector the same length as the \code{hidden_layer_dims} vector or length 1. If length is 1 the same activation function will be used for all hidden layers. Should only contain "relu" or "tanh" as these are the only supported activation functions for hidden layers. Should not be specified if starting from a checkpoint model.}

\item{optimiser}{Type of optimiser to use. One of "GradientDescent", "Momentum", "RMSProp", "Adam".}

\item{keep_prob}{Keep probabilities for applying drop-out in hidden layers. Either a constant or a vector the same length as the \code{hidden_layer_dims} vector. If NULL no drop-out is applied.}

\item{input_keep_prob}{Keep probabilities for applying drop-out in the input layer. Needs to be a single constant. If NULL no drop-out is applied.}

\item{alpha}{L1 regularisation term.}

\item{lambda}{L2 regularisation term.}

\item{mini_batch_size}{Size of mini-batches to use. If NULL full training set is used for each iteration.}

\item{dev_set}{Integer vector representing hold-out data. Integers refer to columns (individual training examples.)}

\item{beta1}{Exponential weighting term for gradients when using Momentum or Adam optimisation.}

\item{beta2}{Exponential weighting term for square pf gradients when using RMSProp or Adam optimisation.}

\item{epsilon}{Small number used for numberical stability to prevent division by zero when using RMSProp or Adam optimisation.}

\item{print_every}{Print info to the log every x epochs. If NULL, no printing is done.}

\item{seed}{Random seed to use for repeatability.}

\item{plot}{Plot cost function when printing to log.}

\item{checkpoint}{Rather than initialise new parameters, start from a checkpoint model.}

\item{keep}{keep X and Y data in final output.}
}
\value{
A model.
}
\description{
Train a neural network model
}
\examples{
# No example yet
}
\author{
Edwin Graham (edwin.graham@uk.rsagroup.com)
}
